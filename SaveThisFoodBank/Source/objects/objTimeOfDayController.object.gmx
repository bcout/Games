<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Data

setTimeOfDay(0);
seconds_in_day = 120; //two minutes
seconds_left = seconds_in_day;
ok_to_evening = false;
ok_to_night = false;
background_alpha[0] = 1;
background_alpha[1] = 0;
background_alpha[2] = 0;

done_moving = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement timer

if(!getPauseMenuOpen() &amp;&amp; (instance_number(objTutorial) == 0)){
    //if the pause menu is not open and the tutorial is gone, decrement timer.
    if(seconds_left &gt; 0){
        seconds_left -= 1/room_speed;
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set ok to change background

if(floor(seconds_left) == 80){
    //transition to evening
    ok_to_evening = true;
}else if(floor(seconds_left) == 40){
    //transition to night
    ok_to_night = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Day at t=0, move player to door, change room

if((seconds_left) == 0){
    setCanGenerateFood(false);
    setOkToMove(false);
    setOkToPause(false);
    instance_destroy(objFoodItem);
    
    //if(seconds_left == 0){
        var move_xinput = -1;
        var destination = 96;
            
        //Move the player
        with(objPlayer){
            if(sprite_index != sprPlayerCartLeft){
                sprite_index = sprPlayerCartLeft;
            }
            if(image_speed != CUTSCENE_WALKING_IMAGE_SPEED){
                image_speed = CUTSCENE_WALKING_IMAGE_SPEED;
            }
            
            var move_speed_this_frame = CUTSCENE_MOVE_SPEED * getSecondsPassed();
            var move_dir = point_direction(0, 0, move_xinput, 0);
                   
            with(objPlayer){
                var xtarg = x + lengthdir_x(move_speed_this_frame, move_dir);
                
                if(move_xinput &gt; 0){
                    if(xtarg &lt; destination){
                        x = xtarg;
                    }else{
                        with(objTimeOfDayController){
                            done_moving = true;
                        }
                    }
                }else if(move_xinput &lt; 0){
                    if(xtarg &gt; destination){
                        x = xtarg;
                    }else{
                        //show_debug_message("done moving");
                        with(objTimeOfDayController){
                            done_moving = true;
                        }
                    }
                }
            }
        }
    //}
    if(done_moving){
        setRoom(roomCollectionArea, roomOffice);
        setOkToMove(true);
        setOkToPause(true);
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change background
if(ok_to_evening){
    if(background_alpha[1] &lt; 1){
        background_alpha[1] += 0.01;
        //background_alpha[0] -= 0.01;
    }else{
        background_alpha[1] = 1;
        //background_alpha[0] = 0;
        setTimeOfDay(1); 
        ok_to_evening = false;
    }
}

if(ok_to_night){
    if(background_alpha[2] &lt; 1){
        background_alpha[2] += 0.01;
        //background_alpha[1] -= 0.01;
    }else{
        background_alpha[2] = 1;
        setTimeOfDay(2);
        //background_alpha[1] = 0;
        ok_to_night = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw seconds left

if(!getPauseMenuOpen() &amp;&amp; (instance_number(objTutorial) == 0)){
    var seconds_to_print = floor(seconds_left);
    draw_sprite(sprClock, 0, 880, 78);
    var padding = 2;
    drawTextColourOutline(880 + sprite_get_width(sprClock) + padding, 78, string(seconds_to_print), c_black, c_white, fntQuota, fa_left, fa_top);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
