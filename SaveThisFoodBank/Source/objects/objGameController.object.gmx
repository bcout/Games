<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Object Description
/*
    This object keeps track of global conditions
    
    Stuff like the amount of time since the last frame, what state the game is in, etc.


*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Data

seconds_passed = 0; //The amount of time since last frame (will be in seconds)
game_over = false; //Whether player has finished game or not
lost_game = false; //Whether player lost the game or not (didn't meet enough quotas)
ok_to_pause = false; //Player can only pause on select screens
ok_to_move = false; //Player can only move on select screens
state = 0;
num_states = 9; //0 to 8, 8 being a repeatable end-game state where you just keep collecting food
previous_room = roomMainMenu;
combo_val = 0;
combo_val_needed = 5; //The combo needed to get a speed increase
player_move_speed = PLAYER_MOVE_SPEED_BASE;
time_of_day = 0; //0: day, 1: evening, 2: night

met_first_quota = false;
met_second_quota = false;
met_last_quota = false;

total_apples_caught = 0;
total_bananas_caught = 0;
total_oranges_caught = 0;
total_hamburgers_caught = 0;

current_apples_caught = 0;
current_bananas_caught = 0;
current_oranges_caught = 0;
current_hamburgers_caught = 0;

first_quota_apples = 28; //28
first_quota_bananas = 19; //19
first_quota_oranges = 24; //24
first_quota_hamburgers = 25; //25

second_quota_apples = 31; //31
second_quota_bananas = 26; //26
second_quota_oranges = 23; //23
second_quota_hamburgers = 0; //0

last_quota_apples = 45; //45
last_quota_bananas = 39; //39
last_quota_oranges = 48; //48
last_quota_hamburgers = 0; //0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///hide cursor

window_set_cursor(cr_none);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate seconds_passed
seconds_passed = delta_time / 1000000; //delta_time returns the time since last frame, /1000000 puts it into seconds
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw quota values, combo meter, and billboard

if(room == roomCollectionArea){
    if(getState() &gt; 1){
        if(getState() == 7){
            if(getMetFirstQuota() &amp;&amp; getMetSecondQuota()){
                drawComboMeter();
            }else{
                drawQuotaValues();
                drawComboMeter();
            }
        }else{
            drawQuotaValues();
            drawComboMeter();
        }
        
        
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
