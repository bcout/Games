<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Data

//show_debug_message("dialogue controller created");
lockDoorsInOffice();

messages = getDialogueForState(getState());
/*
for(var i = 0; i &lt; array_length_1d(messages); i++){
    show_debug_message(messages[i]);
}
*/

ok_to_draw_dialogue = true;


done_printing_dialogue = false;
message_current = 0;
max_length = 65;
cutoff = 0;
timer = 0;
portrait = sprWorkerHead;
draw_italicized = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if we're done printing dialogue

if(getDonePrintingDialogue()){
    if(getState() &gt; 0){
        if(getState() == 5){
            if(!getMetFirstQuota() &amp;&amp; !getMetSecondQuota()){
                //Player failed, lost the game, got fired
                setState(getState() + 1);
                setRoom(roomOffice, roomStreet);
            }else{
                unlockDoorsInOffice();
                instance_destroy();
            }
        }else if(getState() == 7){
            //outro
            setState(getState() + 1);
            setRoom(roomOffice, roomStreet);
        }else{
            unlockDoorsInOffice();
            instance_destroy();
        }
            
    }
    //if state is 0, objIntroSequenceController destroys this object and unlocks the doors
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw textbox, text and portrait
if(getOkToDrawDialogue()){
    var message_end = array_length_1d(messages);
    
    if(message_end &gt; 0){
        var portrait_padding = 8;
        var text_padding = 8;
    
        var char_width = font_get_size(fntDialogue) - 1;
        var line_end = max_length;
        var line = 0;
        var space = 0; //a character count
        var i = 1;
        var delay = 0.2; //time before writing next character
        var vert_spacing = 20;
        
        //Draw textbox
        var num_lines = string_length(messages[message_current]) / max_length; //Number of characters / character per line = num lines
        var box_x = 96;
        var box_y = 96;
        var box_width = box_x + 835;
        var space_per_line = font_get_size(fntDialogue) + vert_spacing;
        var box_height = box_y + max((sprite_get_height(portrait) + 2*portrait_padding), space_per_line * num_lines);
        //draw_sprite(sprTextbox, 0, box_x, box_y);
        draw_set_color(c_black);
        draw_rectangle(box_x, box_y, box_width, box_height, false);
        
        //Prepare to draw text
        var text_x = box_x + portrait_padding + sprite_get_width(portrait) + text_padding;
        var text_y = box_y + portrait_padding;
        
            //Typewriter
        if(cutoff &lt; string_length(messages[message_current])){
            if(timer &gt;= delay){
                cutoff++;
                timer = 0;
            }else{
                timer++;
            }   
        }
        
            //press enter to get next message
        if(keyboard_check_pressed(vk_enter)){
            if(message_current &lt; message_end - 1){
                message_current++;
                cutoff = 0;
            }else{
                //show_debug_message("done printing dialogue");
                setDonePrintingDialogue(true);
            }
        }
        
        if(draw_italicized){
            draw_set_font(fntDialogueItalics);
        }else{
            draw_set_font(fntDialogue);
        }
        draw_set_color(c_white);
        draw_set_halign(fa_left);
        
        //Draw Text
        while(i &lt;= string_length(messages[message_current]) &amp;&amp; i &lt;= cutoff){
        
            var message = messages[message_current];
            if(string_char_at(messages[message_current], 0) == "$"){
                //Starting a line with $ means the boss is speaking (cuz he's the one making the money)
                portrait = sprBossHead;
                message = string_replace(messages[message_current], '$', ''); 
                draw_italicized = false;           
            }else if(string_char_at(messages[message_current], 0) == "%"){
                //Starting a line with % means we want the portrait to be a phone. [p]ercentage, [p]hone.
                portrait = sprPhone;
                message = string_replace(messages[message_current], '%', '');
                draw_italicized = false;
            }else if(string_char_at(messages[message_current], 0) == "*"){
                message = string_replace(messages[message_current] , '*', '');
                draw_italicized = true;
            }else{
                portrait = sprWorkerHead;
                draw_italicized = false;
            }
            
            //go to next line
            var length = 0;
            while(string_char_at(message, i) != " " &amp;&amp; i &lt;= string_length(message)){
                i++;
                length++;
            }
            if(space + length &gt; line_end){
                space = 0;
                line++;
            }
            i -= length;
            
            draw_text(text_x + (space * char_width), text_y + (vert_spacing * line), string_char_at(message, i));
            
            space++;
            i++;
        }
        
        //Draw portrait
        draw_sprite(portrait, 0, box_x + portrait_padding, box_y + portrait_padding);  
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
