<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create some global variables

//Game is an 11x20 grid of 96x96 pixel blocks
max_rows = 5;
max_cols = 10;
block_size = 96;
valid_pipeline = false;

source_struct = noone;
destination_struct = noone;
current_row = noone;
current_col = noone;

pipe_hover_instance = noone;
box_hover_instance = noone;
temp_pipe = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a Highlight Underneath the Player's Cursor

highlight_space = instance_create(mouse_x, mouse_y, obj_highlight_space);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn Pipe Options Bar

instance_create(384, 384, obj_box_pipe_side);
instance_create(480, 384, obj_box_pipe_delete);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn the trees in the room
var i;
var instance;
for(i = 0; i &lt; 4; i++){
    instance = instance_create(576 + (i * 96), -96, obj_tree);
    instance.depth = i * -1;
    instance = instance_create(576 + (i * 96), 0, obj_tree);
    instance.depth = -5 + (i * -1);
    instance = instance_create(576 + (i * 96), 288, obj_tree);
    instance.depth = -10 + (i * -1);
    instance = instance_create(576 + (i * 96), 384, obj_tree);
    instance.depth = -15 + (i * -1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Game Board and Other Details

var row;
var col;
var space;

//Fill the game board with empty spaces
for(row = 0; row &lt; max_rows; row++){
    for(col = 0; col &lt; max_cols; col++){
        space = ds_map_create();
        
        space[? "row"] = row;
        space[? "col"] = col;
        space[? "x_coord"] = col * block_size;
        space[? "y_coord"] = row * block_size;
        space[? "resident_object"] = noone;
        space[? "valid"] = true;
        space[? "removable"] = false;
        space[? "part_of_pipeline"] = false;
        
        game_board[row, col] = space;
    }   
}

//Fill the game_board array with the objects in the room
var instance;
for(row = 0; row &lt; max_rows; row++){
    for(col = 0; col &lt; max_cols; col++){
        space = game_board[row, col];
        instance = instance_position(space[? "x_coord"] + floor(block_size / 2),
                                     space[? "y_coord"] + floor(block_size / 2),
                                     all);
        space[? "resident_object"] = instance;
        if(instance != noone){
            space[? "valid"] = false;
        }
    }
}

//Find the source and destination pipes
var source_found = false;
var destination_found = false;

var current_space;
var obj;
var obj_index;

for(row = 0; row &lt; max_rows; row++){
    for(col = 0; col &lt; max_cols; col++){
        if(source_found &amp;&amp; destination_found){
            break;
        }
        
        current_space = game_board[row, col];
        obj = current_space[? "resident_object"];
        if(obj == noone){
            continue;
        }
        obj_index = obj.object_index;
        if(obj_index == obj_pipe_source){
            source_struct = current_space;
            source_found = true;
        }else if(obj_index == obj_pipe_destination){
            destination_struct = current_space;
            destination_found = true;
        }
    }
}

current_row = source_struct[? "row"];
current_col = source_struct[? "col"];



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create an enemy for testing
instance_create(96, 0, obj_enemy_tutorial_1);
instance_create(view_xview[0] / 2, view_yview[0] / 2, obj_pesky_protesters);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy the menu music object and play construction music

stop_menu_start_construction();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Game Board to Reflect In-Game Pipe Changes

//Search for all the pipes and add them to the game board
var instance;
for(row = 0; row &lt; max_rows; row++){
    for(col = 0; col &lt; max_cols; col++){
        space = game_board[row, col];
        instance = instance_position(space[? "x_coord"] + floor(block_size / 2),
                                     space[? "y_coord"] + floor(block_size / 2),
                                     obj_pipe_parent);
        
        //Do not overwrite any existing objects
        if(space[? "resident_object"] == noone){
            space[? "resident_object"] = instance;
        }   
        
        if(instance != noone){
            space[? "valid"] = false;
        }                
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Figure Out Which Object the Player is Hovering Over

pipe_hover_instance = instance_position(mouse_x, mouse_y, obj_pipe_parent);
box_hover_instance = instance_position(mouse_x, mouse_y, obj_box_parent);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check For a Valid Pipeline

//Initialize the visited_map array
for(row = 0; row &lt; max_rows; row++){
    for(col = 0; col &lt; max_cols; col++){
        visited_map[row, col] = false;
        
        //Keep track of which pipes are a part of the pipeline
        // by searching for them every step
        var temp_space = game_board[row, col];
        temp_space[? "part_of_pipeline"] = false;
        game_board[row, col] = temp_space;
    }
}

current_row = source_struct[? "row"];
current_col = source_struct[? "col"];

var done = false;
var space;
var pipe;
var next_space;
var next_pipe;
var old_row;
var old_col;
var valid = false;

while(!done){
    old_row = current_row;
    old_col = current_col;

    visited_map[current_row, current_col] = true;
    
    space = game_board[current_row, current_col];
    pipe = space[? "resident_object"];
    space[? "part_of_pipeline"] = true;

    if(pipe != noone &amp;&amp; pipe.object_index == obj_pipe_destination){
        valid = true;
        done = true;
        break;
    }

    //Check right
    if(current_col + 1 &lt; max_cols &amp;&amp; visited_map[current_row, current_col + 1] == false){

        next_space = game_board[current_row, current_col + 1];
        next_pipe = next_space[? "resident_object"];

        if(next_pipe != noone){
            if(pipe.object_index == obj_pipe_source
            || pipe.object_index == obj_pipe_side
            || pipe.object_index == obj_pipe_corner_tl
            || pipe.object_index == obj_pipe_corner_bl){

                if(next_pipe.object_index == obj_pipe_side
                    || next_pipe.object_index == obj_pipe_corner_tr
                    || next_pipe.object_index == obj_pipe_corner_br
                    || next_pipe.object_index == obj_pipe_destination){

                    current_col += 1;
                }
            }
        }
    }

    //Check left
    if(current_col - 1 &gt;= 0 &amp;&amp; visited_map[current_row, current_col - 1] == false){

        next_space = game_board[current_row, current_col - 1];
        next_pipe = next_space[? "resident_object"];

        if(next_pipe != noone){
            if(pipe.object_index == obj_pipe_side
            || pipe.object_index == obj_pipe_corner_tr
            || pipe.object_index == obj_pipe_corner_br){

                if(next_pipe.object_index == obj_pipe_side
                    || next_pipe.object_index == obj_pipe_corner_tl
                    || next_pipe.object_index == obj_pipe_corner_bl){

                    current_col -= 1;
                }
            }
        }
    }

    //Check up
    if(current_row - 1 &gt;= 0 &amp;&amp; visited_map[current_row - 1, current_col] == false){

        next_space = game_board[current_row - 1, current_col];
        next_pipe = next_space[? "resident_object"];

        if(next_pipe != noone){

            if(pipe.object_index == obj_pipe_up
                || pipe.object_index == obj_pipe_down
                || pipe.object_index == obj_pipe_corner_br
                || pipe.object_index == obj_pipe_corner_bl){

                if(next_pipe.object_index == obj_pipe_up
                    || next_pipe.object_index == obj_pipe_down
                    || next_pipe.object_index == obj_pipe_corner_tr
                    || next_pipe.object_index == obj_pipe_corner_tl){

                    current_row -= 1;
                }
            }
        }
    }

    //Check down
    if(current_row + 1 &lt; max_cols &amp;&amp; visited_map[current_row + 1, current_col] == false){

        next_space = game_board[current_row + 1, current_col];
        next_pipe = next_space[? "resident_object"];

        if(next_pipe != noone){

            if(pipe.object_index == obj_pipe_up
                || pipe.object_index == obj_pipe_down
                || pipe.object_index == obj_pipe_corner_tr
                || pipe.object_index == obj_pipe_corner_tl){

                if(next_pipe.object_index == obj_pipe_up
                    || next_pipe.object_index == obj_pipe_down
                    || next_pipe.object_index == obj_pipe_corner_br
                    || next_pipe.object_index == obj_pipe_corner_bl){

                    current_row += 1;
                }
            }
        }
    }

    //If all the directions have been checked and we haven't moved, invalid pipe
    if(old_row == current_row &amp;&amp; old_col == current_col){
        done = true;
        valid = false;
        break;
    }
}

valid_pipeline = valid;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Dragged Objects Snap to Grid

var _x = floor(mouse_x/block_size) * block_size;
var _y = floor(mouse_y/block_size) * block_size;

//Make the space under the player's cursor highlighted
highlight_space.x = _x;
highlight_space.y = _y;

//If the player is placing a pipe, make the temporary pipe follow the mouse
if(temp_pipe != noone){
    temp_pipe.x = _x;
    temp_pipe.y = _y;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check If Player Chose a Pipe From Bar

if(mouse_check_button_pressed(mb_left)){
    if(box_hover_instance != noone){
    
        if(temp_pipe != noone){
            instance_destroy(temp_pipe);
            temp_pipe = noone;
        }
    
        var obj_to_make = noone;
        switch(box_hover_instance.object_index){
            case obj_box_pipe_side:
                obj_to_make = obj_pipe_side_temp;
                break;
            case obj_box_pipe_delete:
                obj_to_make = obj_box_pipe_delete_temp;
                break;
            default:
                break;
        }
        
        if(obj_to_make != noone){
            temp_pipe = instance_create(mouse_x, mouse_y, obj_to_make); 
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check If Player is Trying to Place a Temporary Pipe

if(mouse_check_button_pressed(mb_left)){

    //First, check if it is a valid place
    var row = floor(mouse_y/block_size);
    var col = floor(mouse_x/block_size);
    if(row &lt; max_rows &amp;&amp; col &lt; max_cols){
        var space = game_board[row, col];
        if(space[? "valid"] == true){
            if(temp_pipe != noone){
            
                var obj_to_make = noone;
                switch(temp_pipe.object_index){
                    case obj_pipe_side_temp:
                        obj_to_make = obj_pipe_side;
                        break;
                    default:
                        break;
                }
                
                if(obj_to_make != noone){
                    var _x = floor(temp_pipe.x / block_size) * block_size;
                    var _y = floor(temp_pipe.y / block_size) * block_size;
                    
                    instance_create(_x, _y, obj_to_make);
                    space[? "valid"] = false;
                    space[? "removable"] = true;
                    game_board[row, col] = space;
                    
                    audio_play_sound(snd_pipe_place, 0, false);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if the Player is Trying to Delete a Pipe

//Put here instead of with the other place code for simplicity


if(mouse_check_button_pressed(mb_left)){
    if(temp_pipe != noone &amp;&amp; temp_pipe.object_index == obj_box_pipe_delete_temp){
        if(pipe_hover_instance != noone){
            var row = floor(mouse_y/block_size);
            var col = floor(mouse_x/block_size);
            if(row &lt; max_rows &amp;&amp; col &lt; max_cols){
                var space = game_board[row, col];
                if(space[? "removable"] == true){
                    
                    var object = space[? "resident_object"];
                    
                    instance_destroy(object);
                    space[? "resident_object"] = noone;
                    space[? "valid"] = true;
                    visited_map[row, col] = false;
                    game_board[row, col] = space;
                    pipe_hover_instance = noone;   
                }
            }
        }      
    }   
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change room if puzzle is complete
if(valid_pipeline){
    instance_destroy(obj_box_pipe_side);
    instance_destroy(obj_box_pipe_delete);
    instance_destroy(obj_highlight_space);
    instance_create(x, y, obj_end_tutorial_1);
    instance_destroy(self);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
