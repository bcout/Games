<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create some global variables

randomize();

//Game is an 11x20 grid of 96x96 pixel blocks
max_rows = 11;
max_cols = 20;
block_size = 96;
valid_pipeline = false;

source_struct = noone;
destination_struct = noone;
current_row = noone;
current_col = noone;

pipe_hover_instance = noone;
box_hover_instance = noone;
temp_pipe = noone;

pipeline_health = 100;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Game Board and Other Details

game_board = noone;
source_struct = noone;
destination_struct = noone;
current_row = noone;
current_col = noone;

audio_play_sound(snd_action_music, 0, false);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a Highlight Underneath the Player's Cursor

highlight_space = instance_create(mouse_x, mouse_y, obj_highlight_space);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Countdown

time_left = 30; //Second stage lasts 2 minutes
alarm[0] = 1 * room_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Enemy Spawn Alarm

alarm[1] = 2 * room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn an enemy

var col;
var row;
var pipe_in_column;
var enemy_in_column;
var _x;
var _y;
var index = 0;

for(col = 2; col &lt; max_cols - 2; col++){
    pipe_in_column = false;
    enemy_in_column = false;
    
    _x = col * block_size;

    for(row = 0; row &lt; max_rows; row++){
        
        _y = row * block_size;

        if(instance_position(_x, _y, obj_pipe_parent) != noone){
            pipe_in_column = true;
        }
        
        if(instance_position(_x, _y, obj_enemy_parent) != noone){
            enemy_in_column = true;
        }
    }
    
    if(pipe_in_column &amp;&amp; !enemy_in_column){
        valid_x_values[index] = _x;
    }else{
        valid_x_values[index] = -1;
    }
    index++;
    //show_debug_message("col " + string(floor(_x/block_size)) + ": " + string(pipe_in_column) + " | " + string(enemy_in_column));
}

index = irandom_range(0, array_length_1d(valid_x_values) - 1);
while(valid_x_values[index] == -1){
    index = irandom_range(0, array_length_1d(valid_x_values) - 1);
}

_x = valid_x_values[index];
_y = -1;
instance_create(_x, _y, obj_enemy_down);

/*
_x = valid_x_values[index];
_y = -1;
instance_create(_x, _y, obj_enemy_down);
*/

/*
//Get a list of all valid columns
var _x = 192;
var _y = 0;
var index = 0;
var pipe_in_column = false;
var enemy_in_column = false;


while(_x &lt;= 1632){
    pipe_in_column = false;
    enemy_in_column = false;
    
    while(_y &lt;= room_height){
        if(instance_position(_x, _y, obj_pipe_parent)){
            pipe_in_column = true;
        }
        if(instance_position(_x, _y, obj_enemy_parent)){
            enemy_in_column = true;
        }
        
        _y += block_size;
    }
    
    if(pipe_in_column &amp;&amp; !enemy_in_column){
        valid_x_values[index] = _x;
    }else{
        valid_x_values[index] = -1;
    }
    index++;
    _x += block_size;
}

index = irandom_range(0, array_length_1d(valid_x_values) - 1);
while(valid_x_values[index] == -1){
    index = irandom_range(0, array_length_1d(valid_x_values) - 1);
}
_x = valid_x_values[index];
_y = -1;

instance_create(_x, _y, obj_enemy_down);
*/


alarm[1] = 1 * room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement Time Left

time_left--;
if(time_left &gt; 0){
    alarm[0] = 1 * room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Game Board to Reflect In-Game Pipe Changes

//Search for all the pipes and add them to the game board
var instance;
for(row = 0; row &lt; max_rows; row++){
    for(col = 0; col &lt; max_cols; col++){
        space = game_board[row, col];
        instance = instance_position(space[? "x_coord"] + floor(block_size / 2),
                                     space[? "y_coord"] + floor(block_size / 2),
                                     obj_pipe_parent);
        
        //Do not overwrite any existing objects
        if(space[? "resident_object"] == noone){
            space[? "resident_object"] = instance;
        }   
        
        if(instance != noone){
            space[? "valid"] = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Figure Out Which Object the Player is Hovering Over

pipe_hover_instance = instance_position(mouse_x, mouse_y, obj_pipe_parent);
box_hover_instance = instance_position(mouse_x, mouse_y, obj_box_parent);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Dragged Objects Snap to Grid

var _x = floor(mouse_x/block_size) * block_size;
var _y = floor(mouse_y/block_size) * block_size;

//Make the space under the player's cursor highlighted
highlight_space.x = _x;
highlight_space.y = _y;

//If the player is placing a pipe, make the temporary pipe follow the mouse
if(temp_pipe != noone){
    temp_pipe.x = _x;
    temp_pipe.y = _y;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Any Pipes At Zero Health

for(row = 0; row &lt; max_rows; row++){
    for(col = 0; col &lt; max_cols; col++){
        var space = game_board[row, col];
        var object = space[? "resident_object"];
        if(object != noone &amp;&amp; space[? "health"] &lt;= 0){
            with(object){
                instance_create(x, y, obj_pipe_explosion);
            }
            instance_destroy(object);
            space[? "resident_object"] = noone;
            space[? "valid"] = true;
            game_board[row, col] = space;
            pipeline_health -= 10;
            
            audio_play_sound(snd_pipe_explosion, 0, false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if Pipeline Is Destroyed

if(pipeline_health == 0){
    audio_stop_sound(snd_action_music);
    instance_create(0, 0, obj_retry_screen);
    instance_destroy(self);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if Countdown is Done

if(time_left &lt;= 0){
    with(obj_enemy_attack){
        instance_create(x, y, obj_enemy_up);
        instance_destroy(self);
    }
    with(obj_enemy_down){
        instance_create(x, y, obj_enemy_up);
        instance_destroy(self);
    }
    
    alarm[1] = -1;
    
    //room_goto_next();
    instance_create(0, 0, obj_third_stage_controller_spawner);
    instance_destroy(self);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Countdown

draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_font(fnt_money);
draw_set_color(c_white);

draw_text(floor(room_width/2), 150, "Pipeline Health: " + string(pipeline_health) + "%");
if(time_left &lt;= 5){
    draw_set_color(c_red);
}
draw_text(floor(room_width/2), 200, string(time_left));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Debug Details

/*
draw_set_font(fnt_debug);
draw_set_color(c_white);

var row = floor(mouse_y/block_size);
var col = floor(mouse_x/block_size);
if(row &lt; max_rows &amp;&amp; col &lt; max_cols){
    var space = game_board[row, col];

    draw_text(100, 100, "health: " + string(space[? "health"]));
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
